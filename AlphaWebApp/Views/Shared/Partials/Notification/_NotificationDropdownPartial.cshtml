@{
    var userId = User.FindFirstValue(ClaimTypes.NameIdentifier) ?? "anonymous";
    var notifications = await notificationService.GetNotificationsAsync(userId);
}
<div class="dropdown">
    <button id="notification-dropdown-button" class="btn-dropdown" data-bs-toggle="dropdown" aria-expanded="false">
        <i class="bi bi-bell"></i>
        @if (notifications.Any())
        {
            <div class="red-dot"></div> 
        }
    </button>

    <ul id="notification-dropdown" class="dropdown-menu">

        <li class="dropdown-header">
            <p>Notifications</p>
            <p class="dropdown-header-number">@notifications.Count()</p>
        </li>

        @foreach (var notification in notifications)
        {
            <li class="dropdown-item" data-id="@notification.Id">
                <img class="dropdown-item-image" src="@notification.Image">
                <div class="dropdown-item-text">
                    <p class="dropdown-item-header">@notification.Message</p>
                    <p class="dropdown-item-footer" data-created="@notification.Created.ToString("s")">@notification.Created</p>
                </div>
                <button class="btn-exit" onclick="dismissNotification(@notification.Id)">
                    <i class="bi bi-x"></i>
                </button>
            </li>
        }
    </ul>
</div>

<script>
    const connection = new SignalR.HubConnectionBuilder()
    .withUrl("/notificationHub")
    .build()

    connection.on("RecieveNotification", function(notification) {
        const notifications = document.querySelector('.dropdown-menu')

        const item = document.createElement('li')
        item.className = 'dropdown-item'
        item.setAttribute('data-id', notification.id)
        item.innerHTML = 
        `
            <img class="dropdown-item-image" src="${notification.image}">
            <div class="dropdown-item-text">
                <p class="dropdown-item-header">${notification.message}</p>
                <p class="dropdown-item-footer" data-created="${new Date(notification.created).toISOString()}">${notification.created}</p>
            </div>
            <button class="btn-exit" onclick="dismissNotification('${notification.id}')"><i class="bi bi-x"></i></button>
        `
        /* Placing where they will spawn */ 
        notifications.insertBefore(item, notifications.firstChild)
        updateRelativeTimes()
        updateNotificationCount()

    })

    connection.on("NotificationDismissed", function(notificationId) {
        const element = document.querySelector(`.dropdown-item[data-id="${notificationId}"]`)
        if (element) {
            element.remove()
            updateNotificationCount()
        }
    })

    connection.start().catch(error => console.error(error))


    /* Handling removing notifications */
    async function dismissNotification(notificationId) {
        try {
            const res = await fetch(`/api/nofifications/dismiss/${notificationId}`, { method : 'POST' })
            if (res.ok) {
                removeNotification(notificationId)
            }
            else {
                console.error('Error removing notification')
            }

        }
        catch(error) {
            console.error('Error removing notification: ', error)
        }
    }

    function removeNotification(notificationId) {
        const element = document.querySelector(`.dropdown-item[data-id="${notificationId}"]`)
        if (element) {
            element.remove()
            updateNotificationCount()
        }
    }

    /* Update counter and add dot */
    function updateNotificationCount() {
        const notifications = document.querySelector('.dropdown-menu')
        const number = document.querySelector('.dropdown-header-number')
        const button = document.querySelector('#notification-dropdown-button')
        const count = notifications.querySelectorAll('li').length

        if (number) {
            number.textContent = count
        }

        let dot = button.querySelector('.red-dot')
        if (count > 1 && !dot) {
            dot = document.createElement('div')
            dot.className = 'red-dot'
            button.appendChild(dot)
        }

        if (count === 1 && dot) {
            dot.remove()
        }
    }
     /* UserFriendly time display */
    function updateRelativeTimes() {
        const elements = document.querySelectorAll('.dropdown-item-footer')
        const now = new Date()

        elements.forEach(el => {
            const created = new Date(el.getAttribute('data-created'))
            const diff = now - created
            const diffSeconds = Math.floor(diff / 1000)
            const diffMinutes = Math.floor(diffSeconds / 60)
            const diffHours = Math.floor(diffMinutes / 60)
            const diffDays = Math.floor(diffHours / 24)
            const diffWeeks = Math.floor(diffDays / 7)

            let relativeTime = ''

            if (diffMinutes < 1) {
                relativeTime = 'just now'
            } else if (diffMinutes < 60) {
                relativeTime = diffMinutes + ' min ago'
            } else if (diffHours < 2) {
                relativeTime = diffHours + ' hour ago'
            } else if (diffHours < 24) {
                relativeTime = diffHours + ' hours ago'
            } else if (diffDays < 2) {
                relativeTime = diffDays + ' day ago'
            } else if (diffDays < 7) {
                relativeTime = diffDays + ' days ago'
            } else {
                relativeTime = diffWeeks + ' weeks ago'
            }
            el.textContent = relativeTime;
        });
    }
</script>